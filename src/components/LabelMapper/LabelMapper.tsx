import { Label as LabelPF, LabelProps as LabelPropsPF } from '@patternfly/react-core';

import { EmptyStateSymbol } from 'components/EmptyStateSymbol/EmptyStateSymbol';
import { TooltipWrapper } from 'components/TooltipWrapper/TooltipWrapper';

import { uiLogger } from 'services/uiLogger';

interface ILabelMapperItem {
  text: string;
  color?: LabelPropsPF['color'];
}

export type ILabelMapper<Types> = {
  [key in Types as string]: ILabelMapperItem;
};

interface ILabelMapperProps {
  mapperItem?: ILabelMapperItem;
  onRemove?: () => void;
  tooltip?: string;
  isDisabled?: boolean;
}

/**
 * Represents a Label generated by label mapper item.
 *
 * @param mapperItem - the mapper item that will be used to generate the label
 * @param onRemove - if passed, displays remove icon inside label
 * @param tooltip - tooltip text
 * @param isDisabled - is 'onRemove' disabled?
 */
export const LabelMapper = ({ mapperItem, onRemove, tooltip, isDisabled }: ILabelMapperProps) => {
  if (!mapperItem) {
    uiLogger.error(`Error attempting to get mapper item: mapper item undefined`);
    return <EmptyStateSymbol text={false} />;
  }

  const { text, color } = mapperItem;
  const safeColor = color ?? 'grey';

  return (
    // onClick needs to be defined for the disabled styling
    <TooltipWrapper tooltip={tooltip}>
      <span>
        <LabelPF
          color={safeColor}
          onClose={onRemove}
          onClick={isDisabled && onRemove ? () => {} : undefined} // onClose is not enough to get disabled styling
          isDisabled={isDisabled}
        >
          {text}
        </LabelPF>
      </span>
    </TooltipWrapper>
  );
};
